name: CD

on:
  push:
    branches: ['main']

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    #───────────────────────────────────────────────────────────#
    # 0)  코드를 체크아웃 + Buildx
    #───────────────────────────────────────────────────────────#
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3

    #───────────────────────────────────────────────────────────#
    # 1)  이미지 태그 (소문자)
    #───────────────────────────────────────────────────────────#
    - name: Prepare image tag
      id: prep
      run: echo "image_tag=ghcr.io/${GITHUB_REPOSITORY,,}:latest" >>"$GITHUB_OUTPUT"

    #───────────────────────────────────────────────────────────#
    # 2)  GHCR 로그인 + Build & Push
    #───────────────────────────────────────────────────────────#
    - name: Log in to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build & push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./mjsec-frontend
        file:    ./mjsec-frontend/Dockerfile
        push:    true
        tags:    ${{ steps.prep.outputs.image_tag }}

    #───────────────────────────────────────────────────────────#
    # 3)  원격 서버 배포
    #───────────────────────────────────────────────────────────#
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v0.1.7
      with:
        host:       ${{ secrets.HOST }}
        port:       ${{ secrets.SSH_PORT }}
        username:   ${{ secrets.USER }}
        key:        ${{ secrets.SSH_KEY }}

        script: |
          set -euo pipefail

          ######################################################
          ## ①  코드 디렉터리 준비
          ######################################################
          if [ ! -d /srv/mjsec/.git ]; then
            git clone --branch main https://github.com/${{ github.repository }} /srv/mjsec
          fi
          cd /srv/mjsec
          git fetch origin main
          git reset --hard origin/main

          ######################################################
          ## ②  .env 생성 + export  (Compose 전달용)
          ######################################################
          cat > .env <<EOF
          ORG=${{ vars.ORG }}
          REPO=${{ vars.REPO }}
          DOMAIN=${{ vars.DOMAIN }}
          EMAIL=${{ vars.EMAIL }}
          EOF
          echo "--- .env ---"; cat .env; echo "--------------"
          set -o allexport; . ./.env; set +o allexport

          ######################################################
          ## ③  GHCR 로그인 (서버 pull)
          ######################################################
          if [ -n "${{ secrets.GHCR_PAT }}" ]; then
            echo "${{ secrets.GHCR_PAT }}" \
              | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          fi

          ##############################
          # ① HTTP‑only 기동
          ##############################
          export BOOTSTRAP=http
          docker compose --env-file .env \
            -f mjsec-frontend/docker-compose.prod.yaml up -d nginx
          unset BOOTSTRAP

          ##############################
          # ② 최초 또는 갱신 Certbot
          ##############################
          mjsec-frontend/docker/scripts/init-letsencrypt.sh   # ← 패치된 버전

          ##############################
          # ③ 전체 스택 SSL 모드 재기동
          ##############################
          docker compose --env-file .env \
            -f mjsec-frontend/docker-compose.prod.yaml pull
          docker compose --env-file .env \
            -f mjsec-frontend/docker-compose.prod.yaml up -d --remove-orphans


          ######################################################
          ## ⑦  디스크 청소
          ######################################################
          docker image prune -f
