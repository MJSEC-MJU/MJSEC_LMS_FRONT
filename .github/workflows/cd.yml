name: CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Prepare image tag (lower‑case)
        id: prep
        run: |
          IMAGE="ghcr.io/${GITHUB_REPOSITORY,,}:latest"   # ,,: bash lower-case
          echo "image_tag=$IMAGE" >> "$GITHUB_OUTPUT"


      - name: Log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./mjsec-frontend
          file: ./mjsec-frontend/Dockerfile
          push: true
          tags: ${{ steps.prep.outputs.image_tag }}

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e

            echo "① 코드 디렉토리로 이동 및 동기화"
            if [ ! -d /srv/mjsec ]; then
              echo "/srv/mjsec 디렉토리가 없음"
              exit 1
            fi
            cd /srv/mjsec
            git fetch origin main
            git reset --hard origin/main

            echo "② 최신 이미지 풀 & 컨테이너 재기동"
            docker compose -f mjsec-frontend/docker-compose.prod.yaml pull
            docker compose -f mjsec-frontend/docker-compose.prod.yaml up -d --remove-orphans

            echo "③ 불필요한 이미지 정리"
            docker image prune -f
